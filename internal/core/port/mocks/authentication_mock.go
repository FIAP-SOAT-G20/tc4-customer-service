// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/authentication_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/authentication_port.go -destination=internal/core/port/mocks/authentication_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIAuthenticationService is a mock of IAuthenticationService interface.
type MockIAuthenticationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthenticationServiceMockRecorder
	isgomock struct{}
}

// MockIAuthenticationServiceMockRecorder is the mock recorder for MockIAuthenticationService.
type MockIAuthenticationServiceMockRecorder struct {
	mock *MockIAuthenticationService
}

// NewMockIAuthenticationService creates a new mock instance.
func NewMockIAuthenticationService(ctrl *gomock.Controller) *MockIAuthenticationService {
	mock := &MockIAuthenticationService{ctrl: ctrl}
	mock.recorder = &MockIAuthenticationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthenticationService) EXPECT() *MockIAuthenticationServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockIAuthenticationService) GenerateToken(userIdentifier string) (string, string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userIdentifier)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockIAuthenticationServiceMockRecorder) GenerateToken(userIdentifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockIAuthenticationService)(nil).GenerateToken), userIdentifier)
}
