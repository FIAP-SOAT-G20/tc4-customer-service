// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/customer_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/customer_port.go -destination=internal/core/port/mocks/customer_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/FIAP-SOAT-G20/tc4-customer-service/internal/core/domain/entity"
	dto "github.com/FIAP-SOAT-G20/tc4-customer-service/internal/core/dto"
	port "github.com/FIAP-SOAT-G20/tc4-customer-service/internal/core/port"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerController is a mock of CustomerController interface.
type MockCustomerController struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerControllerMockRecorder
	isgomock struct{}
}

// MockCustomerControllerMockRecorder is the mock recorder for MockCustomerController.
type MockCustomerControllerMockRecorder struct {
	mock *MockCustomerController
}

// NewMockCustomerController creates a new mock instance.
func NewMockCustomerController(ctrl *gomock.Controller) *MockCustomerController {
	mock := &MockCustomerController{ctrl: ctrl}
	mock.recorder = &MockCustomerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerController) EXPECT() *MockCustomerControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerController) Create(ctx context.Context, presenter port.Presenter, input dto.CreateCustomerInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, presenter, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerControllerMockRecorder) Create(ctx, presenter, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerController)(nil).Create), ctx, presenter, input)
}

// Delete mocks base method.
func (m *MockCustomerController) Delete(ctx context.Context, presenter port.Presenter, input dto.DeleteCustomerInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, presenter, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerControllerMockRecorder) Delete(ctx, presenter, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerController)(nil).Delete), ctx, presenter, input)
}

// Get mocks base method.
func (m *MockCustomerController) Get(ctx context.Context, presenter port.Presenter, input dto.GetCustomerInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, presenter, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerControllerMockRecorder) Get(ctx, presenter, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerController)(nil).Get), ctx, presenter, input)
}

// GetByCPF mocks base method.
func (m *MockCustomerController) GetByCPF(ctx context.Context, presenter port.Presenter, input dto.GetCustomerByCPFInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCPF", ctx, presenter, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCPF indicates an expected call of GetByCPF.
func (mr *MockCustomerControllerMockRecorder) GetByCPF(ctx, presenter, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCPF", reflect.TypeOf((*MockCustomerController)(nil).GetByCPF), ctx, presenter, input)
}

// List mocks base method.
func (m *MockCustomerController) List(ctx context.Context, presenter port.Presenter, input dto.ListCustomersInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, presenter, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCustomerControllerMockRecorder) List(ctx, presenter, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCustomerController)(nil).List), ctx, presenter, input)
}

// Update mocks base method.
func (m *MockCustomerController) Update(ctx context.Context, presenter port.Presenter, input dto.UpdateCustomerInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, presenter, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCustomerControllerMockRecorder) Update(ctx, presenter, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerController)(nil).Update), ctx, presenter, input)
}

// MockCustomerUseCase is a mock of CustomerUseCase interface.
type MockCustomerUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerUseCaseMockRecorder
	isgomock struct{}
}

// MockCustomerUseCaseMockRecorder is the mock recorder for MockCustomerUseCase.
type MockCustomerUseCaseMockRecorder struct {
	mock *MockCustomerUseCase
}

// NewMockCustomerUseCase creates a new mock instance.
func NewMockCustomerUseCase(ctrl *gomock.Controller) *MockCustomerUseCase {
	mock := &MockCustomerUseCase{ctrl: ctrl}
	mock.recorder = &MockCustomerUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerUseCase) EXPECT() *MockCustomerUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerUseCase) Create(ctx context.Context, input dto.CreateCustomerInput) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerUseCaseMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerUseCase)(nil).Create), ctx, input)
}

// Delete mocks base method.
func (m *MockCustomerUseCase) Delete(ctx context.Context, input dto.DeleteCustomerInput) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, input)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerUseCaseMockRecorder) Delete(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerUseCase)(nil).Delete), ctx, input)
}

// Get mocks base method.
func (m *MockCustomerUseCase) Get(ctx context.Context, input dto.GetCustomerInput) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, input)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerUseCaseMockRecorder) Get(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerUseCase)(nil).Get), ctx, input)
}

// GetByCPF mocks base method.
func (m *MockCustomerUseCase) GetByCPF(ctx context.Context, i dto.GetCustomerByCPFInput) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCPF", ctx, i)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCPF indicates an expected call of GetByCPF.
func (mr *MockCustomerUseCaseMockRecorder) GetByCPF(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCPF", reflect.TypeOf((*MockCustomerUseCase)(nil).GetByCPF), ctx, i)
}

// List mocks base method.
func (m *MockCustomerUseCase) List(ctx context.Context, input dto.ListCustomersInput) ([]*entity.Customer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].([]*entity.Customer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockCustomerUseCaseMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCustomerUseCase)(nil).List), ctx, input)
}

// Update mocks base method.
func (m *MockCustomerUseCase) Update(ctx context.Context, input dto.UpdateCustomerInput) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCustomerUseCaseMockRecorder) Update(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerUseCase)(nil).Update), ctx, input)
}

// MockCustomerGateway is a mock of CustomerGateway interface.
type MockCustomerGateway struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerGatewayMockRecorder
	isgomock struct{}
}

// MockCustomerGatewayMockRecorder is the mock recorder for MockCustomerGateway.
type MockCustomerGatewayMockRecorder struct {
	mock *MockCustomerGateway
}

// NewMockCustomerGateway creates a new mock instance.
func NewMockCustomerGateway(ctrl *gomock.Controller) *MockCustomerGateway {
	mock := &MockCustomerGateway{ctrl: ctrl}
	mock.recorder = &MockCustomerGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerGateway) EXPECT() *MockCustomerGatewayMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerGateway) Create(ctx context.Context, customer *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerGatewayMockRecorder) Create(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerGateway)(nil).Create), ctx, customer)
}

// Delete mocks base method.
func (m *MockCustomerGateway) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerGatewayMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerGateway)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockCustomerGateway) FindAll(ctx context.Context, name string, page, limit int) ([]*entity.Customer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, name, page, limit)
	ret0, _ := ret[0].([]*entity.Customer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCustomerGatewayMockRecorder) FindAll(ctx, name, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCustomerGateway)(nil).FindAll), ctx, name, page, limit)
}

// FindByCPF mocks base method.
func (m *MockCustomerGateway) FindByCPF(ctx context.Context, cpf string) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCPF", ctx, cpf)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCPF indicates an expected call of FindByCPF.
func (mr *MockCustomerGatewayMockRecorder) FindByCPF(ctx, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCPF", reflect.TypeOf((*MockCustomerGateway)(nil).FindByCPF), ctx, cpf)
}

// FindByID mocks base method.
func (m *MockCustomerGateway) FindByID(ctx context.Context, id int) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCustomerGatewayMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCustomerGateway)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockCustomerGateway) Update(ctx context.Context, customer *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerGatewayMockRecorder) Update(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerGateway)(nil).Update), ctx, customer)
}

// MockCustomerDataSource is a mock of CustomerDataSource interface.
type MockCustomerDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerDataSourceMockRecorder
	isgomock struct{}
}

// MockCustomerDataSourceMockRecorder is the mock recorder for MockCustomerDataSource.
type MockCustomerDataSourceMockRecorder struct {
	mock *MockCustomerDataSource
}

// NewMockCustomerDataSource creates a new mock instance.
func NewMockCustomerDataSource(ctrl *gomock.Controller) *MockCustomerDataSource {
	mock := &MockCustomerDataSource{ctrl: ctrl}
	mock.recorder = &MockCustomerDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerDataSource) EXPECT() *MockCustomerDataSourceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerDataSource) Create(ctx context.Context, product *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerDataSourceMockRecorder) Create(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerDataSource)(nil).Create), ctx, product)
}

// Delete mocks base method.
func (m *MockCustomerDataSource) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerDataSourceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerDataSource)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockCustomerDataSource) FindAll(ctx context.Context, filters map[string]any, page, limit int) ([]*entity.Customer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filters, page, limit)
	ret0, _ := ret[0].([]*entity.Customer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCustomerDataSourceMockRecorder) FindAll(ctx, filters, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCustomerDataSource)(nil).FindAll), ctx, filters, page, limit)
}

// FindByCPF mocks base method.
func (m *MockCustomerDataSource) FindByCPF(ctx context.Context, cpf string) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCPF", ctx, cpf)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCPF indicates an expected call of FindByCPF.
func (mr *MockCustomerDataSourceMockRecorder) FindByCPF(ctx, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCPF", reflect.TypeOf((*MockCustomerDataSource)(nil).FindByCPF), ctx, cpf)
}

// FindByID mocks base method.
func (m *MockCustomerDataSource) FindByID(ctx context.Context, id int) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCustomerDataSourceMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCustomerDataSource)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockCustomerDataSource) Update(ctx context.Context, product *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerDataSourceMockRecorder) Update(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerDataSource)(nil).Update), ctx, product)
}
