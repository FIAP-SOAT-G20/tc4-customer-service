// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/customer_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/customer_port.go -destination=internal/core/port/mocks/customer_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-lambda-auth-tf/internal/core/domain/entity"
	dto "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-lambda-auth-tf/internal/core/dto"
	port "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-lambda-auth-tf/internal/core/port"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerController is a mock of CustomerController interface.
type MockCustomerController struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerControllerMockRecorder
	isgomock struct{}
}

// MockCustomerControllerMockRecorder is the mock recorder for MockCustomerController.
type MockCustomerControllerMockRecorder struct {
	mock *MockCustomerController
}

// NewMockCustomerController creates a new mock instance.
func NewMockCustomerController(ctrl *gomock.Controller) *MockCustomerController {
	mock := &MockCustomerController{ctrl: ctrl}
	mock.recorder = &MockCustomerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerController) EXPECT() *MockCustomerControllerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCustomerController) Get(ctx context.Context, presenter port.Presenter, input dto.GetCustomerInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, presenter, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerControllerMockRecorder) Get(ctx, presenter, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerController)(nil).Get), ctx, presenter, input)
}

// MockCustomerUseCase is a mock of CustomerUseCase interface.
type MockCustomerUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerUseCaseMockRecorder
	isgomock struct{}
}

// MockCustomerUseCaseMockRecorder is the mock recorder for MockCustomerUseCase.
type MockCustomerUseCaseMockRecorder struct {
	mock *MockCustomerUseCase
}

// NewMockCustomerUseCase creates a new mock instance.
func NewMockCustomerUseCase(ctrl *gomock.Controller) *MockCustomerUseCase {
	mock := &MockCustomerUseCase{ctrl: ctrl}
	mock.recorder = &MockCustomerUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerUseCase) EXPECT() *MockCustomerUseCaseMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCustomerUseCase) Get(ctx context.Context, input dto.GetCustomerInput) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, input)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerUseCaseMockRecorder) Get(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerUseCase)(nil).Get), ctx, input)
}

// MockCustomerGateway is a mock of CustomerGateway interface.
type MockCustomerGateway struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerGatewayMockRecorder
	isgomock struct{}
}

// MockCustomerGatewayMockRecorder is the mock recorder for MockCustomerGateway.
type MockCustomerGatewayMockRecorder struct {
	mock *MockCustomerGateway
}

// NewMockCustomerGateway creates a new mock instance.
func NewMockCustomerGateway(ctrl *gomock.Controller) *MockCustomerGateway {
	mock := &MockCustomerGateway{ctrl: ctrl}
	mock.recorder = &MockCustomerGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerGateway) EXPECT() *MockCustomerGatewayMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockCustomerGateway) FindOne(ctx context.Context, cpf string) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, cpf)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockCustomerGatewayMockRecorder) FindOne(ctx, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCustomerGateway)(nil).FindOne), ctx, cpf)
}

// MockCustomerDataSource is a mock of CustomerDataSource interface.
type MockCustomerDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerDataSourceMockRecorder
	isgomock struct{}
}

// MockCustomerDataSourceMockRecorder is the mock recorder for MockCustomerDataSource.
type MockCustomerDataSourceMockRecorder struct {
	mock *MockCustomerDataSource
}

// NewMockCustomerDataSource creates a new mock instance.
func NewMockCustomerDataSource(ctrl *gomock.Controller) *MockCustomerDataSource {
	mock := &MockCustomerDataSource{ctrl: ctrl}
	mock.recorder = &MockCustomerDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerDataSource) EXPECT() *MockCustomerDataSourceMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockCustomerDataSource) FindOne(ctx context.Context, filters dto.CustomerDatasourceFilter) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, filters)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockCustomerDataSourceMockRecorder) FindOne(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCustomerDataSource)(nil).FindOne), ctx, filters)
}
