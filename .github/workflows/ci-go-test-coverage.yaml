name: ci/coverage

on:
  pull_request:
    types: [ opened, reopened, synchronize ]

permissions:
  contents: write
  pull-requests: write

jobs:
  go-test-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version:
          - "1.24"

    steps:
      - uses: actions/checkout@v3

      - name: "Setup Go ${{ matrix.go-version }}"
        uses: actions/setup-go@v3
        with:
          go-version: "${{ matrix.go-version }}"
          cache: true

      - name: Display Go version
        run: go version

      - name: generate test coverage
        env:
          COVERAGE_MODE: "true"
        run: go test -json -timeout 1m -race ./... -coverprofile=./cover.out -covermode=atomic -coverpkg=./...

      - name: check test coverage
        id: coverage
        uses: vladopajic/go-test-coverage@v2
        continue-on-error: true # Should fail after coverage comment is posted
        with:
          config: ./.github/.testcoverage.yml
          # git-token: ${{ github.ref_name == 'main' && secrets.GITHUB_TOKEN || '' }}
          # git-branch: badges

      - name: 📊 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            cover.out
            coverage.out
            .github/.testcoverage.yml
          retention-days: 7

      # Generate enhanced coverage report
      - name: 📋 Generate coverage summary
        if: always()
        id: coverage-summary
        run: |
          # Determine coverage status based on coverage check step outcome
          if [ "${{ steps.coverage.outcome }}" = "success" ]; then
            COVERAGE_STATUS="✅ PASSED"
            STATUS_ICON="✅"
            COVERAGE_RESULT="Coverage requirements met"
          else
            COVERAGE_STATUS="❌ FAILED"
            STATUS_ICON="❌"
            COVERAGE_RESULT="Coverage requirements not met"
          fi
          
          # Extract coverage percentage from report if available
          if [ -n "${{ steps.coverage.outputs.report }}" ]; then
            COVERAGE_REPORT="${{ steps.coverage.outputs.report }}"
          else
            COVERAGE_REPORT="Coverage report not available"
          fi
          
          # Create enhanced coverage summary
          echo "## 📊 Test Coverage Report" > coverage_summary.md
          echo "" >> coverage_summary.md
          echo "**Status:** $COVERAGE_STATUS" >> coverage_summary.md
          echo "**Result:** $COVERAGE_RESULT" >> coverage_summary.md
          echo "" >> coverage_summary.md
          echo "### 🎯 Coverage Details:" >> coverage_summary.md
          echo '```' >> coverage_summary.md
          echo "$COVERAGE_REPORT" >> coverage_summary.md
          echo '```' >> coverage_summary.md
          echo "" >> coverage_summary.md
          echo "### 📋 Coverage Requirements:" >> coverage_summary.md
          echo "- **Minimum Threshold:** 80%" >> coverage_summary.md
          echo "- **Coverage Profile:** ./cover.out" >> coverage_summary.md
          echo "- **Coverage Mode:** atomic" >> coverage_summary.md
          echo "" >> coverage_summary.md
          echo "### 🔧 Test Configuration:" >> coverage_summary.md
          echo "- **Go Version:** ${{ matrix.go-version }}" >> coverage_summary.md
          echo "- **Race Detection:** ✅ enabled" >> coverage_summary.md
          echo "- **Timeout:** 1 minute" >> coverage_summary.md
          echo "- **Test Packages:** All packages (./...)" >> coverage_summary.md
          echo "" >> coverage_summary.md
          echo "### Excluded from Coverage:" >> coverage_summary.md
          echo "- Mock files (\`*_mock.go\`)" >> coverage_summary.md
          echo "- Request/Response DTOs (\`*_request.go\`, \`*_response.go\`)" >> coverage_summary.md
          echo "- Infrastructure adapters (\`*_gateway.go\`, \`*_datasource.go\`, \`*_presenter.go\`)" >> coverage_summary.md
          echo "- Documentation and configuration files" >> coverage_summary.md
          echo "- Value objects and domain entities" >> coverage_summary.md
          echo "" >> coverage_summary.md
          echo "---" >> coverage_summary.md
          echo "_Automated test coverage ensures code quality and identifies untested business logic._" >> coverage_summary.md
          
          # Also add to step summary
          cat coverage_summary.md >> $GITHUB_STEP_SUMMARY

      - name: Comment coverage report on PR
        if: always() && github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-tag: coverage-report
          filePath: coverage_summary.md

      - name: "finally check coverage"
        if: steps.coverage.outcome == 'failure'
        shell: bash
        run: echo "coverage check failed" && exit 1